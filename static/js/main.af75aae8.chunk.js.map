{"version":3,"sources":["context.js","components/Cell/Cell.js","components/Row/Row.js","App.js","reportWebVitals.js","index.js"],"names":["Context","React","createContext","Cell","cell","rowIndex","cellIndex","setCellContent","useContext","useState","isChecked","setIsChecked","content","setContent","isSaveVisible","setIsSaveVisible","setNewContent","split","every","el","className","type","defaultChecked","htmlFor","id","onClick","prev","value","onChange","event","target","onFocus","onBlur","disabled","onMouseDown","console","log","Row","row","map","App","rows","setRows","cellWidth","cellHeight","Math","ceil","window","innerWidth","cellsAmount","setCellsAmount","innerHeight","rowsAmount","setRowsAmount","onResizeAdder","newWidth","document","documentElement","scrollWidth","newHeight","scrollHeight","addRows","addCells","onScrollAdder","docX","docY","scrollX","pageXOffset","pageYOffset","length","amount","newRows","i","newRow","s","push","Date","random","prevRows","useEffect","addEventListener","removeEventListener","Provider","newContent","cellId","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"kQAEaA,EAAUC,IAAMC,gB,eCGtB,SAASC,EAAT,GAIH,IAHFC,EAGC,EAHDA,KACAC,EAEC,EAFDA,SACAC,EACC,EADDA,UAEQC,EAAmBC,qBAAWR,GAA9BO,eAER,EAAkCE,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA8BF,mBAASL,EAAKQ,SAA5C,mBAAOA,EAAP,KAAgBC,EAAhB,KACA,EAA0CJ,oBAAS,GAAnD,mBAAOK,EAAP,KAAsBC,EAAtB,KAEA,SAASC,EAAcJ,GACL,KAAZA,IACFC,EAAWD,GACXG,GAAiB,IAGfH,EAAQK,MAAM,IAAIC,OAAM,SAAAC,GAAE,OAAIA,GAAM,KAAOA,GAAM,SACnDN,EAAWD,GACXG,GAAiB,IAIrB,OACE,sBACEK,UACgB,IAAdd,GAAgC,IAAbD,EACf,gBACa,IAAbA,GAAgC,IAAdC,EAClB,eACa,IAAbD,GAAgC,IAAdC,EAClB,YACA,OARR,UAWiB,IAAdA,GAAgC,IAAbD,EAAiBA,EAAiB,GACxC,IAAbA,GAAgC,IAAdC,EAAkBA,EAAkB,GAEvC,IAAdA,GAAgC,IAAbD,GACnB,qCACE,uBACEgB,KAAK,WACLD,UAAW,WACXE,eAAgBZ,IAIlB,uBACEa,QAAO,UAAKnB,EAAKoB,IACjBJ,UAAW,eACXK,QAAS,WACPd,GAAa,SAAAe,GAAI,OAAKA,KAEpBX,IADEL,IALR,SAYGA,GAAa,MAGhB,uBACEc,GAAE,UAAKpB,EAAKoB,IACZH,KAAK,OACLD,UAAW,YACXO,MAAOf,EACPgB,SAAU,SAAAC,GAAK,OAAIb,EAAca,EAAMC,OAAOH,QAE9CI,QAAS,WACPhB,GAAiB,IAGnBU,QAAS,WACPV,GAAiB,IAGnBiB,OAAQ,WACNhB,EAAcZ,EAAKQ,SACnBG,GAAiB,IAGnBkB,WAAUvB,IAIXI,GACC,wBACEM,UAAW,aACXc,YAAa,WACX3B,EAAeK,EAASR,EAAKoB,IAC7BT,GAAiB,GACjBoB,QAAQC,IAAR,sCACiC9B,EADjC,gBACkDD,EADlD,aAC+DO,EAAO,0BAAsBA,GAAY,0BAN5G,wB,MCvFL,SAASyB,EAAT,GAGH,IAFFC,EAEC,EAFDA,IACAjC,EACC,EADDA,SAGA,OACE,qBAAKe,UAAwB,IAAbf,EAAiB,cAAe,MAAhD,SAEGiC,EAAIC,KAAI,SAACnC,EAAME,GAAP,OACP,cAAC,EAAD,CACED,SAAUA,EACVC,UAAWA,EAEXF,KAAMA,GADDA,EAAKoB,S,MCVb,SAASgB,IACd,MAAwB/B,mBAAS,IAAjC,mBAAOgC,EAAP,KAAaC,EAAb,KAEMC,EAAY,GACZC,EAAa,GAGnB,EAAsCnC,mBACpCoC,KAAKC,KAAKC,OAAOC,WAAaL,GAHX,GAErB,mBAAOM,EAAP,KAAoBC,EAApB,KAGA,EAAoCzC,mBAClCoC,KAAKC,KAAKC,OAAOI,YAAcP,GANZ,GAKrB,mBAAOQ,EAAP,KAAmBC,EAAnB,KAkBA,SAASC,IACP,IAAMC,EAAWC,SAASC,gBAAgBC,YACpCC,EAAYH,SAASC,gBAAgBG,aAEvCf,KAAKC,KAAKa,EAAYf,GAAcQ,GACnCP,KAAKC,KAAKa,EAAYf,GAAc,MAEvCS,EAAcR,KAAKC,KAAKa,EAAYf,IACpCiB,EAAQhB,KAAKC,KAAKa,EAAYf,GAAcQ,IAG1CP,KAAKC,KAAKS,EAAWZ,GAAaM,GACjCJ,KAAKC,KAAKS,EAAWZ,GAAa,MAErCO,EAAeL,KAAKC,KAAKS,EAAWZ,IACpCmB,EAASjB,KAAKC,KAAKS,EAAWZ,GAAaM,IAI/C,SAASc,IACP,IAAMC,EAAOR,SAASC,gBAAgBC,YAChCO,EAAOT,SAASC,gBAAgBG,aAEhCM,EAAUnB,OAAOoB,YAGT,IAFEpB,OAAOqB,aAEFH,EAAOlB,OAAOI,aAAe,KAChDE,EAAcR,KAAKC,KAAKmB,EAAOrB,IAC3BH,EAAK4B,QAAU,OACjBR,EApDe,IAwDL,IAAVK,GAAiBF,EAAOjB,OAAOC,YAAc,KAC/CE,EAAeL,KAAKC,KAAKkB,EAAOrB,IAC5BF,EAAK,GAAG4B,QAAU,OACpBP,EA3De,IAgErB,SAASD,EAAQS,GAGf,IAFA,IAAMC,EAAU,GAEPC,EAAI,EAAGA,EAAIF,EAnED,EAmEwBE,IAAK,CAG9C,IAFA,IAAMC,EAAS,GAENC,EAAI,EAAGA,EAAIzB,EAAayB,IAC/BD,EAAOE,KAAK,CAACnD,GAAG,GAAD,QAAM,IAAIoD,MAAV,OAAmB/B,KAAKgC,UAAYjE,QAAS,KAG9D2D,EAAQI,KAAKF,GAGf/B,GAAQ,SAAAoC,GAAQ,4BAAQA,GAAaP,MAGvC,SAAST,EAASQ,GAChB5B,GAAQ,SAAAoC,GAAQ,OAAIA,EAASvC,KAC3B,SAAAD,GAGE,IAFA,IAAMmC,EAAM,YAAOnC,GAEVoC,EAAI,EAAGA,EAAIJ,EArFL,EAqF4BI,IACzCD,EAAOE,KAAK,CAACnD,GAAG,GAAD,QAAM,IAAIoD,MAAV,OAAmB/B,KAAKgC,UAAYjE,QAAS,KAG9D,OAAO6D,QAkBb,OAlGAM,qBAAU,WACRlB,EAAQT,KACP,IAEH2B,qBAAU,WAIR,OAHAhC,OAAOiC,iBAAiB,SAAU1B,GAClCP,OAAOiC,iBAAiB,SAAUjB,GAE3B,WACLhB,OAAOkC,oBAAoB,SAAU3B,GACrCP,OAAOkC,oBAAoB,SAAUlB,OAyFvC,cAAC/D,EAAQkF,SAAT,CACEvD,MAAO,CACLpB,eAhBN,SAAwB4E,EAAYC,GAClC1C,GAAQ,SAAAoC,GAAQ,OAAIA,EAASvC,KAAI,SAAAD,GAAG,OAAIA,EAAIC,KACxC,SAAAnC,GACE,OAAIA,EAAKoB,KAAO4D,EACP,2BAAIhF,GAAX,IAAiBQ,QAASuE,IAGrB/E,aAOb,SAME,qBAAKgB,UAAU,MAAf,SAEGqB,GAAQA,EAAKF,KAAI,SAACD,EAAKkC,GAAN,OAChB,cAAC,EAAD,CAEEnE,SAAUmE,EACVlC,IAAKA,GAFAkC,UClIjB,IAYea,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFxC,SAASyC,eAAe,SAM1BZ,M","file":"static/js/main.af75aae8.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Context = React.createContext();\n","import { useState, useContext } from 'react';\nimport { Context } from '../../context';\n\nimport './Cell.css';\n\nexport function Cell ({\n  cell,\n  rowIndex,\n  cellIndex,\n}) {\n  const { setCellContent } = useContext(Context);\n\n  const [isChecked, setIsChecked] = useState(false);\n  const [content, setContent] = useState(cell.content);\n  const [isSaveVisible, setIsSaveVisible] = useState(false);\n\n  function setNewContent(content) {\n    if (content === '') {\n      setContent(content);\n      setIsSaveVisible(true);\n    };\n\n    if (content.split('').every(el => el >= '0' && el <= '9')) {\n      setContent(content);\n      setIsSaveVisible(true);\n    };\n  };\n\n  return (\n    <div\n      className={\n        cellIndex === 0 && rowIndex !== 0\n          ? 'leftRulerCell'\n          : rowIndex === 0 && cellIndex !== 0\n          ? 'topRulerCell'\n          : rowIndex === 0 && cellIndex === 0\n          ? 'crossCell'\n          : 'cell'\n      }\n    >\n      {cellIndex === 0 ? (rowIndex !== 0 ? rowIndex : '') : ''}\n      {rowIndex === 0 ? (cellIndex !== 0 ? cellIndex : '') : ''}\n\n      {(cellIndex !== 0 && rowIndex !== 0) &&\n        <>\n          <input\n            type='checkbox'\n            className={'checkbox'}\n            defaultChecked={isChecked}\n          >\n          </input>\n\n          <label\n            htmlFor={`${cell.id}`}\n            className={'fakeCheckbox'}\n            onClick={() => {\n              setIsChecked(prev => !prev);\n              if (isChecked) {\n                setIsSaveVisible(true);\n              } else {\n                setIsSaveVisible(false);\n              }\n            }}\n          >\n            {isChecked && 'X'}\n          </label>\n\n          <input\n            id={`${cell.id}`}\n            type='text'\n            className={'textInput'}\n            value={content}\n            onChange={event => setNewContent(event.target.value)}\n\n            onFocus={() => {\n              setIsSaveVisible(true);\n            }}\n\n            onClick={() => {\n              setIsSaveVisible(true);\n            }}\n\n            onBlur={() => {\n              setNewContent(cell.content);\n              setIsSaveVisible(false);\n            }}\n\n            disabled={isChecked ? true : false}\n          >\n          </input>\n\n          {isSaveVisible &&\n            <button\n              className={'saveButton'}\n              onMouseDown={() => {\n                setCellContent(content, cell.id);\n                setIsSaveVisible(false);\n                console.log(\n                  `Changed cell with coords X: ${cellIndex}, Y: ${rowIndex}. ${content ? `New content is: ${content}` : 'Contentent is clear.'}`\n                );\n              }}\n            >\n              SAVE\n            </button>\n          }\n        </>\n      }\n    </div>\n  );\n};\n","import React from 'react';\nimport { Cell } from '../Cell/Cell';\n\nimport './Row.css';\n\nexport function Row ({\n  row,\n  rowIndex,\n}) {\n\n  return (\n    <div className={rowIndex === 0 ? 'topRulerRow' :'row'}>\n\n      {row.map((cell, cellIndex) => (\n        <Cell\n          rowIndex={rowIndex}\n          cellIndex={cellIndex}\n          key={cell.id}\n          cell={cell}\n        />\n      ))}\n\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { Context } from './context';\n\nimport { Row } from './components/Row/Row';\n\nimport './App.css';\n\nexport function App() {\n  const [rows, setRows] = useState([]);\n\n  const cellWidth = 75;\n  const cellHeight = 25;\n  const cellsOutside = 5;\n\n  const [cellsAmount, setCellsAmount] = useState(\n    Math.ceil(window.innerWidth / cellWidth) + cellsOutside\n  );\n  const [rowsAmount, setRowsAmount] = useState(\n    Math.ceil(window.innerHeight / cellHeight) + cellsOutside\n  );\n\n  useEffect(() => {\n    addRows(rowsAmount);\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('resize', onResizeAdder);\n    window.addEventListener('scroll', onScrollAdder);\n\n    return () => {\n      window.removeEventListener('resize', onResizeAdder);\n      window.removeEventListener('scroll', onScrollAdder);\n    };\n  });\n\n  function onResizeAdder() {\n    const newWidth = document.documentElement.scrollWidth;\n    const newHeight = document.documentElement.scrollHeight;\n\n    if (Math.ceil(newHeight / cellHeight) > rowsAmount\n      && Math.ceil(newHeight / cellHeight) < 40000\n    ) {\n      setRowsAmount(Math.ceil(newHeight / cellHeight));\n      addRows(Math.ceil(newHeight / cellHeight) - rowsAmount);\n    }\n\n    if (Math.ceil(newWidth / cellWidth) > cellsAmount\n      && Math.ceil(newWidth / cellWidth) < 40000\n    ) {\n      setCellsAmount(Math.ceil(newWidth / cellWidth));\n      addCells(Math.ceil(newWidth / cellWidth) - cellsAmount);\n    }\n  };\n\n  function onScrollAdder() {\n    const docX = document.documentElement.scrollWidth;\n    const docY = document.documentElement.scrollHeight;\n\n    const scrollX = window.pageXOffset;\n    const scrollY = window.pageYOffset;\n\n    if (scrollY * 100 / (docY - window.innerHeight) > 90) {\n      setRowsAmount(Math.ceil(docY / cellHeight));\n      if (rows.length <= 40000 - cellsOutside) {\n        addRows(cellsOutside);\n      };\n    };\n\n    if (scrollX * 100 / (docX - window.innerWidth) > 90) {\n      setCellsAmount(Math.ceil(docX / cellWidth));\n      if (rows[0].length <= 40000 - cellsOutside) {\n        addCells(cellsOutside);\n      };\n    };\n  };\n\n  function addRows(amount) {\n    const newRows = [];\n\n    for (let i = 0; i < amount + cellsOutside; i++) {\n      const newRow = [];\n\n      for (let s = 0; s < cellsAmount; s++) {\n        newRow.push({id: `${+new Date()}${Math.random()}`, content: ''})\n      }\n\n      newRows.push(newRow);\n    }\n\n    setRows(prevRows => [...prevRows, ...newRows]);\n  };\n\n  function addCells(amount) {\n    setRows(prevRows => prevRows.map(\n      row => {\n        const newRow = [...row];\n\n        for (let s = 0; s < amount + cellsOutside; s++) {\n          newRow.push({id: `${+new Date()}${Math.random()}`, content: ''})\n        }\n\n        return newRow;\n      })\n    );\n  };\n\n  function setCellContent(newContent, cellId) {\n    setRows(prevRows => prevRows.map(row => row.map(\n        cell => {\n          if (cell.id === cellId) {\n            return {...cell, content: newContent};\n          }\n\n          return cell;\n        }\n      )\n    ));\n  };\n\n  return (\n    <Context.Provider\n      value={{\n        setCellContent\n      }}\n    >\n\n      <div className=\"App\">\n\n        {rows && rows.map((row, i) => (\n          <Row\n            key={i}\n            rowIndex={i}\n            row={row}\n          />\n        ))}\n\n      </div>\n\n    </Context.Provider>\n  );\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}