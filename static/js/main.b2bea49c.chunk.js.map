{"version":3,"sources":["components/Cell/Cell.js","components/Row/Row.js","App.js","reportWebVitals.js","index.js"],"names":["Cell","cell","rowIndex","cellIndex","className","Row","row","map","id","App","useState","rows","setRows","cellWidth","cellHeight","Math","ceil","window","innerWidth","cellsAmount","setCellsAmount","innerHeight","rowsAmount","setRowsAmount","onResizeAdder","newWidth","document","documentElement","scrollWidth","newHeight","scrollHeight","addRows","addCells","onScrollAdder","docX","docY","scrollX","pageXOffset","pageYOffset","amount","newRows","i","newRow","s","push","Date","random","content","prevRows","useEffect","addEventListener","removeEventListener","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b2bea49c.chunk.js","sourcesContent":["import './Cell.css';\n\nexport function Cell ({ cell, rowIndex, cellIndex }) {\n\n\n  return (\n\n    <div\n      className={\n        cellIndex === 0 && rowIndex !== 0\n        ? 'leftRulerCell'\n        : rowIndex === 0 && cellIndex !== 0\n        ? 'topRulerCell'\n        : rowIndex === 0 && cellIndex === 0\n        ? 'crossCell'\n        : 'cell'\n      }\n    >\n\n      {cellIndex === 0 ? (rowIndex !== 0 ? rowIndex : '') : ''}\n      {rowIndex === 0 ? (cellIndex !== 0 ? cellIndex : '') : ''}\n\n    </div>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport { Cell } from '../Cell/Cell';\n\nimport './Row.css';\n\nexport function Row ({ row, rowIndex }) {\n\n  return (\n\n    <div className={rowIndex === 0 ? 'topRulerRow' :'row'}>\n      {row.map((cell, cellIndex) => (\n        <Cell\n          rowIndex={rowIndex}\n          cellIndex={cellIndex}\n          key={cell.id}\n          cell={cell}\n        />\n      ))}\n    </div>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport { Row } from './components/Row/Row';\n\nimport './App.css';\n\nexport function App() {\n  const [rows, setRows] = useState([]);\n\n  const cellWidth = 75;\n  const cellHeight = 25;\n  const cellsOutside = 5;\n\n  const [cellsAmount, setCellsAmount] = useState(Math.ceil(window.innerWidth / cellWidth) + cellsOutside);\n  const [rowsAmount, setRowsAmount] = useState(Math.ceil(window.innerHeight / cellHeight) + cellsOutside);\n\n  useEffect(() => {\n    addRows(rowsAmount);\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('resize', onResizeAdder);\n    window.addEventListener('scroll', onScrollAdder);\n\n    return () => {\n      window.removeEventListener('resize', onResizeAdder);\n      window.removeEventListener('scroll', onScrollAdder);\n    };\n  });\n\n  function onResizeAdder() {\n    const newWidth = document.documentElement.scrollWidth;\n    const newHeight = document.documentElement.scrollHeight;\n\n    if (Math.ceil(newHeight / cellHeight) > rowsAmount\n    && Math.ceil(newHeight / cellHeight) < 40000\n    ) {\n      setRowsAmount(Math.ceil(newHeight / cellHeight));\n      addRows(Math.ceil(newHeight / cellHeight) - rowsAmount);\n    }\n\n    if (Math.ceil(newWidth / cellWidth) > cellsAmount\n      && Math.ceil(newWidth / cellWidth) < 40000\n    ) {\n      setCellsAmount(Math.ceil(newWidth / cellWidth));\n      addCells(Math.ceil(newWidth / cellWidth) - cellsAmount);\n    }\n  };\n\n  function onScrollAdder() {\n    const docX = document.documentElement.scrollWidth;\n    const docY = document.documentElement.scrollHeight;\n\n    const scrollX = window.pageXOffset;\n    const scrollY = window.pageYOffset;\n\n    if (scrollY * 100 / (docY - window.innerHeight) > 90) {\n      setRowsAmount(Math.ceil(docY / cellHeight));\n      addRows(cellsOutside);\n    };\n\n    if (scrollX * 100 / (docX - window.innerWidth) > 90) {\n      setCellsAmount(Math.ceil(docX / cellWidth));\n      addCells(cellsOutside);\n    };\n  };\n\n  function addRows(amount) {\n    const newRows = [];\n\n    for (let i = 0; i < amount + cellsOutside; i++) {\n      const newRow = [];\n\n      for (let s = 0; s < cellsAmount; s++) {\n        newRow.push({id: `${+new Date()}${Math.random()}`, content: ''})\n      }\n\n      newRows.push(newRow);\n    }\n\n    setRows(prevRows => [...prevRows, ...newRows]);\n  };\n\n  function addCells(amount) {\n    setRows(prevRows => prevRows.map(\n      row => {\n        const newRow = [...row];\n\n        for (let s = 0; s < amount + cellsOutside; s++) {\n          newRow.push({id: `${+new Date()}${Math.random()}`, content: ''})\n        }\n\n        return newRow;\n      })\n    );\n  };\n\n  return (\n    <div className=\"App\">\n\n      {rows && rows.map((row, i) => (\n        <Row\n          key={i}\n          rowIndex={i}\n          row={row}\n        />\n      ))}\n\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}