{"version":3,"sources":["components/Cell/Cell.js","components/Row/Row.js","App.js","reportWebVitals.js","index.js"],"names":["Cell","cell","className","Row","row","map","id","App","useState","rows","setRows","Math","ceil","window","innerWidth","cellsAmount","setCellsAmount","innerHeight","rowsAmount","setRowsAmount","addMore","event","amount","newWidth","currentTarget","newHeight","addRows","prevRows","newRow","s","push","Date","random","content","newRows","i","useEffect","addEventListener","removeEventListener","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yQAEO,SAASA,EAAT,GAAyB,EAARC,KAGtB,OAEE,qBAAKC,UAAW,S,MCFb,SAASC,EAAT,GAAwB,IAARC,EAAO,EAAPA,IAErB,OAEE,qBAAKF,UAAW,MAAhB,SACGE,EAAIC,KAAI,SAAAJ,GAAI,OACX,cAAC,EAAD,CAEEA,KAAMA,GADDA,EAAKK,S,MCPb,SAASC,IACd,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAKA,EAAsCF,mBAASG,KAAKC,KAAKC,OAAOC,WAH9C,KAGlB,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAoCR,mBAASG,KAAKC,KAAKC,OAAOI,YAH3C,KAGnB,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,SAASC,EAAQC,GACf,IAkCgBC,EAlCVC,EAAWF,EAAMG,cAAcV,WAC/BW,EAAYJ,EAAMG,cAAcP,YAElCN,KAAKC,KAAKa,EArBG,IAqBuBP,GACrCP,KAAKC,KAAKa,EAtBI,IAsBsB,MAErCN,EAAcR,KAAKC,KAAKa,EAxBT,KAyBfC,EAAQf,KAAKC,KAAKa,EAzBH,IAyB6BP,IAG1CP,KAAKC,KAAKW,EA7BE,IA6BsBR,GACjCJ,KAAKC,KAAKW,EA9BC,IA8BuB,MAErCP,EAAeL,KAAKC,KAAKW,EAhCX,KAqDAD,EApBLX,KAAKC,KAAKW,EAjCL,IAiC6BR,EAqB7CL,GAAQ,SAAAiB,GAAQ,OAAIA,EAAStB,KAC3B,SAAAD,GAGE,IAFA,IAAMwB,EAAM,YAAOxB,GAEVyB,EAAI,EAAGA,EAAIP,EAAQO,IAC1BD,EAAOE,KAAK,CAACxB,GAAG,GAAD,QAAM,IAAIyB,MAAV,OAAmBpB,KAAKqB,UAAYC,QAAS,KAG9D,OAAOL,SAzBb,SAASF,EAAQJ,GAGf,IAFA,IAAMY,EAAU,GAEPC,EAAI,EAAGA,EAAIb,EAAQa,IAAK,CAG/B,IAFA,IAAMP,EAAS,GAENC,EAAI,EAAGA,EAAId,EAAac,IAC/BD,EAAOE,KAAK,CAACxB,GAAG,GAAD,QAAM,IAAIyB,MAAV,OAAmBpB,KAAKqB,UAAYC,QAAS,KAG9DC,EAAQJ,KAAKF,GAGflB,GAAQ,SAAAiB,GAAQ,4BAAQA,GAAaO,MAiBvC,OA7DAE,qBAAU,WACRV,EAAQR,KACP,IAEHkB,qBAAU,WAGR,OAFAvB,OAAOwB,iBAAiB,SAAUjB,GAE3B,WACLP,OAAOyB,oBAAoB,SAAUlB,OAsDvC,qBAAKlB,UAAU,MAAf,SAEGO,GAAQA,EAAKJ,KAAI,SAACD,EAAK+B,GAAN,OAChB,cAAC,EAAD,CAEE/B,IAAKA,GADA+B,QChFf,IAYeI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.bb9b6012.chunk.js","sourcesContent":["import './Cell.css';\n\nexport function Cell ({ cell }) {\n\n\n  return (\n\n    <div className={'cell'}>\n\n    </div>\n  );\n}","import React, { useState, useEffect } from 'react';\nimport { Cell } from '../Cell/Cell';\n\nimport './Row.css';\n\nexport function Row ({ row }) {\n\n  return (\n\n    <div className={'row'}>\n      {row.map(cell => (\n        <Cell\n          key={cell.id}\n          cell={cell}\n        />\n      ))}\n    </div>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport { Row } from './components/Row/Row';\n\nimport './App.css';\n\nexport function App() {\n  const [rows, setRows] = useState([]);\n\n  const cellWidth = 60;\n  const cellHeight = 20;\n\n  const [cellsAmount, setCellsAmount] = useState(Math.ceil(window.innerWidth / cellWidth));\n  const [rowsAmount, setRowsAmount] = useState(Math.ceil(window.innerHeight / cellHeight));\n\n  useEffect(() => {\n    addRows(rowsAmount);\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('resize', addMore);\n\n    return () => {\n      window.removeEventListener('resize', addMore);\n    };\n  });\n\n  function addMore(event) {\n    const newWidth = event.currentTarget.innerWidth;\n    const newHeight = event.currentTarget.innerHeight;\n\n    if (Math.ceil(newHeight / cellHeight) > rowsAmount\n    && Math.ceil(newHeight / cellHeight) < 40000\n    ) {\n      setRowsAmount(Math.ceil(newHeight / cellHeight));\n      addRows(Math.ceil(newHeight / cellHeight) - rowsAmount);\n    }\n\n    if (Math.ceil(newWidth / cellWidth) > cellsAmount\n      && Math.ceil(newWidth / cellWidth) < 40000\n    ) {\n      setCellsAmount(Math.ceil(newWidth / cellWidth));\n      addCells(Math.ceil(newWidth / cellWidth) - cellsAmount);\n    }\n  };\n\n  function addRows(amount) {\n    const newRows = [];\n\n    for (let i = 0; i < amount; i++) {\n      const newRow = [];\n\n      for (let s = 0; s < cellsAmount; s++) {\n        newRow.push({id: `${+new Date()}${Math.random()}`, content: ''})\n      }\n\n      newRows.push(newRow);\n    }\n\n    setRows(prevRows => [...prevRows, ...newRows]);\n  };\n\n  function addCells(amount) {\n    setRows(prevRows => prevRows.map(\n      row => {\n        const newRow = [...row];\n\n        for (let s = 0; s < amount; s++) {\n          newRow.push({id: `${+new Date()}${Math.random()}`, content: ''})\n        }\n\n        return newRow;\n      })\n    );\n  };\n\n  return (\n    <div className=\"App\">\n\n      {rows && rows.map((row, i) => (\n        <Row\n          key={i}\n          row={row}\n        />\n      ))}\n\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}